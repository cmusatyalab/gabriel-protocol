syntax = "proto3";

package gabriel;

import "google/protobuf/any.proto";

option java_package = "edu.cmu.cs.gabriel.protocol";
option java_outer_classname = "Protos";

enum PayloadType {
    IMAGE = 0;
    VIDEO = 1;
    AUDIO = 2;
    IMU = 3;
    TEXT = 4;
    ANIMATION = 5;
}

message FromClient {
    int64 frame_id = 1;
    PayloadType payload_type = 2;
    string filter_passed = 3;
    repeated bytes payloads_for_frame = 4;

    google.protobuf.Any extras = 5;
}

message ResultWrapper {
    // From https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/wrappers.proto#L120
    // TODO: Switch to google.protobuf.StringValue once MobilEdgeX supports protobuf-javalite
    message StringValue {
        // The string value.
     	string value = 1;
    }

    enum Status {
        SUCCESS = 0;
	UNSPECIFIED_ERROR = 1;

	// Errors that are not related to Gabriel but rather to the engine
	// itself.
        ENGINE_ERROR = 2;

	// Cognitive engine expected different PayloadType from this filter
        WRONG_INPUT_FORMAT = 3;

	// No Cognitive engines accept frames from filter_passed
        NO_ENGINE_FOR_FILTER_PASSED = 4;

	// This client has no tokens to send frames from filter_passed
        NO_TOKENS = 5;

	// The server dropped the frame because it was backed up
        SERVER_DROPPED_FRAME = 6;
    }

    message Result {
        PayloadType payload_type = 1;
        bytes payload = 2;
    }

    int64 frame_id = 1;
    Status status = 2;
    repeated Result results = 3;

    // Specify the name of the filter the original frame passed to allow the
    // client to return the token correctly
    string filter_passed = 4;

    // Specify the name of the module that produced the result
    StringValue result_producer_name = 5;

    // Pass state back to client.
    google.protobuf.Any extras = 6;
}

message ToClient {
    message WelcomeMessage {
        repeated string filters_consumed = 1;
	int32 num_tokens_per_filter = 2;
    }

    oneof welcome_or_result {
        ResultWrapper result_wrapper = 1;
	WelcomeMessage welcome_message = 2;
    }
}

message ToEngine {
    string host = 1;
    int32 port = 2;
    FromClient from_client = 3;
}

message FromEngine {
    string host = 1;
    int32 port = 2;
    ResultWrapper result_wrapper = 3;
}
